{"version":3,"sources":["Form/index.js","List/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskName","setNewTaskName","onSubmit","event","preventDefault","trim","className","value","onChange","target","autoFocus","placeholder","List","tasks","HideDone","deleteTask","toggleTaskDone","map","id","name","done","key","onClick","Buttons","toggleHideDone","doAllTasks","length","disabled","every","Section","title","extraHeaderContent","body","Header","Container","children","App","setHideDone","setTasks","task","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c105e386.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.css\";\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskName, setNewTaskName] = useState(\"\");\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        addNewTask(newTaskName.trim());\n        setNewTaskName(\"\");\n    }\n\n    return (\n        <form onSubmit={onFormSubmit} className=\"form\">\n            <input value={newTaskName} onChange={({ target }) => setNewTaskName(target.value)} autoFocus placeholder=\"Co jest do zrobienia?\" className=\"form__input\" />\n            <button className=\"form__button\">Dodaj zadanie</button>\n        </form>\n    )\n};\nexport default Form;","import React from \"react\";\nimport \"./style.css\";\n\nconst List = ({ tasks, HideDone, deleteTask, toggleTaskDone }) => (\n    <ul className=\"list\">\n        {tasks.map(({ id, name, done }) => (\n            <li\n                key={id}\n                className={`list__item${done && HideDone ? \" list__item--hidden\" : \"\"}`}\n            >\n                <button\n                    onClick={() => toggleTaskDone(id)}\n                    className=\"list__button\"\n                >\n                    {done ? \"âœ”\" : \"\"}\n                </button>\n                <span className={`list__taskName ${done ? \"list__taskName--done\" : \"\"}`}>\n                    {name}\n                </span>\n                <button\n                    onClick={() => deleteTask(id)}\n                    className=\"list__button list__button--delete\"\n                >\n                    ðŸ—‘\n                </button>\n            </li>\n        ))}\n    </ul>\n)\nexport default List;","import React from \"react\";\nimport \"./style.css\";\n\nconst Buttons = ({ tasks, HideDone, toggleHideDone, doAllTasks }) => (\n    <div className=\"buttons\">\n        {tasks.length > 0 && (\n            <>\n                <button\n                    className=\"buttons__button\"\n                    onClick={toggleHideDone}\n                >\n                    {HideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\n                </button>\n                <button\n                    className=\"buttons__button\"\n                    disabled={tasks.every(({ done }) => done)}\n                    onClick={doAllTasks}\n                >\n                    UkoÅ„cz wszystkie\n                </button>\n            </>\n        )}\n    </div>\n);\nexport default Buttons;","import React from \"react\";\nimport \"./style.css\";\n\nconst Section = ({ title, extraHeaderContent, body }) => (\n    <section className=\"section\">\n        <div className=\"section__container\">\n            <h2 className=\"section__title\">{title}</h2>\n            {extraHeaderContent}\n        </div>\n        <div className=\"section__body\">\n            {body}\n        </div>\n    </section>\n)\nexport default Section;","import React from \"react\";\n\nconst Header = ({ title }) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n)\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Container = ({ children }) => (\n    <main className=\"container\">\n        {children}\n    </main>\n)\nexport default Container;","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [HideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(\n    [\n      { id: 1, name: \"ZjeÅ›Ä‡ kolacje\", done: true },\n      { id: 2, name: \"IÅ›Ä‡ spaÄ‡\", done: false },\n    ]\n  );\n  const toggleHideDone = () => {\n    setHideDone(HideDone => !HideDone);\n  };\n  const deleteTask = id => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n  const toggleTaskDone = id => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done }\n      }\n\n      return task\n    }));\n  };\n  const doAllTasks = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true })))\n  };\n  const addNewTask = (name) => {\n    if (name) {\n      setTasks(tasks => [\n        ...tasks,\n        {\n          name,\n          done: false,\n          id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n        },\n      ]);\n    }\n  }\n\n  return (\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadaÅ„\"\n        extraHeaderContent=\n        {<Buttons\n          tasks={tasks}\n          HideDone={HideDone}\n          toggleHideDone={toggleHideDone}\n          doAllTasks={doAllTasks}\n        />}\n        body=\n        {<List\n          tasks={tasks}\n          HideDone={HideDone}\n          deleteTask={deleteTask}\n          toggleTaskDone={toggleTaskDone} />}\n      />\n    </Container>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}