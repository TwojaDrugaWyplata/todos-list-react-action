{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","autoFocus","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","name","id","done","key","onClick","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","setTasks","filter","task","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.873b0c5a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.css\"\n\nconst Form = ({addNewTask}) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        addNewTask(newTaskContent.trim());\n        setNewTaskContent(\"\");\n    }\n\n    return (\n        <form className=\"form\" onSubmit={onFormSubmit}>\n            <input\n                value={newTaskContent}\n                className=\"form__input\"\n                autoFocus\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            />\n            <button className=\"form__button\">Dodaj zadanie</button>\n        </form>\n    );\n};\n\nexport default Form;","import React from \"react\";\nimport \"./style.css\"\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n    <ul className=\"tasksList\">\n        {tasks.map(({ name, id, done }) => (\n            <li\n                key={id}\n                className={`tasksList__item${hideDone && done ? \" tasksList__item--hidden\" : \"\"}`}>\n                <button\n                    className={`tasksList__button\n                    ${done ? \"\" : \" tasksList__button--taskNotDone\"}`}\n                    onClick={() => toggleTaskDone(id)}\n                />\n                <span className={`tasksList__task ${done ? \"\" : \" tasksList__task--taskNotDone\"}`}>\n                    {name}\n                </span>\n                <button\n                    className=\"tasksList__button tasksList__button--deleteButton\"\n                    onClick={() => removeTask(id)}\n                />\n            </li>\n        ))}\n    </ul>\n);\n\nexport default Tasks;","import React from \"react\";\nimport \"./style.css\"\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\n    <div className=\"buttons__container\">\n        {tasks.length > 0 && (\n            <>\n                <button\n                    onClick={toggleHideDone}\n                    className={`buttons__button${tasks.length > 0 ? \"\" : \" buttons__button--hidden\"}`}>\n                    {hideDone ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\n                </button>\n                <button\n                onClick={setAllDone}\n                    disabled={tasks.every(({ done }) => done)}\n                    className={`buttons__button${tasks.length > 0 ? \"\" : \" buttons__button--hidden\"}`}>\n                    Ukończ wszystkie\n                </button>\n            </>\n        )}\n    </div>\n\n);\n\nexport default Buttons;","import React from \"react\";\nimport \"./style.css\"\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n  <div className=\"section\">\n    <div className=\"section__container\">\n      <h2 className=\"section__header\">{title}</h2>\n      {extraHeaderContent}\n    </div>\n    {body}\n  </div>\n);\n\nexport default Section;","import React from \"react\";\n\nconst Header = ({ title }) => (\n    <h1>{title}</h1>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\"\n\nconst Container = ({ children }) => (\n    <main className=\"container\">\n        {children}\n    </main>\n);\n\n\nexport default Container;","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([\n    { id: 1, name: \"Zjeść kolacje\", done: false },\n    { id: 2, name: \"Iść spać\", done: true },\n  ]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      };\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (name) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        name,\n        done: false,\n        id: tasks.length ? tasks[tasks.length -1].id + 1 : 1,\n      }\n    ])\n  };\n\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={<Tasks\n          tasks={tasks}\n          hideDone={hideDone}\n          removeTask={removeTask}\n          toggleTaskDone={toggleTaskDone}\n        />}\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}